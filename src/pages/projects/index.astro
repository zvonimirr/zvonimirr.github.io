---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Project from "../../components/Project.astro";
import { projects } from "../../utils/projects";
import type { TechStack } from "../../utils/projects";
import TechStackIcon from "../../components/TechStackIcon.astro";

const sortedProjects = projects.sort((a, b) => {
  return b.date.getTime() - a.date.getTime();
});

const techList = projects.reduce((acc: Record<string, TechStack>, project) => {
  const tech = project.techStack;
  for (const t of tech) {
    if (!acc[t.icon] && t.id) {
      acc[t.icon] = t;
    }
  }
  return acc;
}, {});
---

<BaseLayout title="Projects" mainClass="flex-grow" transition:persist>
  <h1 class="text-4xl font-bold">List of projects</h1>
  {/* List of tech stack */}
  <div id="tech-stack-filter-container" class="mt-4 hidden">
    <h2 class="text-lg">Filter by tech:</h2>
    <div class="flex flex-wrap flex-row gap-2" id="tech-stack-filter">
      {
        Object.values(techList).map((tech) => (
          <TechStackIcon
            id={tech.id}
            name={tech.icon}
            title={tech.name}
            class={tech.class}
          />
        ))
      }
    </div>
  </div>

  {/* Grid of projects with autofit of minimum 300px */}
  <div
    class="mt-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"
  >
    {sortedProjects.map((project) => <Project {...project} />)}
  </div>
</BaseLayout>

<script>
  function setup() {
    const technologies: string[] = [];
    const projects = document.querySelectorAll("[data-tech-stack]");
    const stacks = document.querySelectorAll("#tech-stack-filter svg");
    stacks.forEach((stack) => {
      // Remove w and h classes from all stacks
      stack.classList.remove("w-16", "h-16");
      stack.classList.add(
        "w-8",
        "h-8",
        "grayscale",
        "hover:grayscale-0",
        "hover:scale-125",
        "cursor-pointer"
      );
      // Add click event listener to all stacks
      stack.addEventListener("click", (e) => {
        // Get the name
        let svg = e.target as HTMLElement;
        while (svg.tagName !== "svg") {
          svg = svg.parentElement as HTMLElement;
        }

        const tech = svg.dataset.tech;

        if (tech) {
          // Toggle the tech in the list
          const index = technologies.indexOf(tech);
          if (index === -1) {
            technologies.push(tech);
            svg.classList.remove("grayscale");
            svg.classList.add("scale-110");
          } else {
            technologies.splice(index, 1);
            svg.classList.add("grayscale");
            svg.classList.remove("scale-110");
          }
        }

        // Rerender the projects
        rerender();
      });

      function rerender() {
        function showProject(project: HTMLElement) {
          project.classList.remove("grayscale");
          project.classList.remove("pointer-events-none");
          project.classList.remove("opacity-50");
        }

        function hideProject(project: HTMLElement) {
          project.classList.add("grayscale");
          project.classList.add("pointer-events-none");
          project.classList.add("opacity-50");
        }

        // Show all the projects if no tech is selected
        if (technologies.length === 0) {
          projects.forEach((project) => showProject(project as HTMLElement));
          return;
        }

        // Hide all projects
        projects.forEach((project) => {
          hideProject(project as HTMLElement);
        });

        // Show only the projects that have the selected tech
        projects.forEach((project) => {
          const techs = (
            (project as HTMLElement).dataset.techStack ?? ""
          ).split(",");

          for (const tech of technologies) {
            if (techs?.includes(tech)) {
              showProject(project as HTMLElement);
              break;
            }
          }
        });
      }

      document
        .getElementById("tech-stack-filter-container")
        ?.classList.remove("hidden");
    });
  }

  document.addEventListener("astro:page-load", setup);
</script>
